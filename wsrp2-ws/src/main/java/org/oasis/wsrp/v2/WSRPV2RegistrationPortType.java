
package org.oasis.wsrp.v2;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.ws.Holder;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.3-b02-
 * Generated source version: 2.0
 * 
 */
@WebService(name = "WSRP_v2_Registration_PortType", targetNamespace = "urn:oasis:names:tc:wsrp:v2:intf")
public interface WSRPV2RegistrationPortType {


    /**
     * 
     * @param lifetime
     * @param registrationData
     * @param scheduledDestruction
     * @param userContext
     * @param registrationHandle
     * @param extensions
     * @param registrationState
     * @throws OperationFailed
     * @throws MissingParameters
     * @throws OperationNotSupported
     */
    @WebMethod(action = "urn:oasis:names:tc:wsrp:v2:register")
    @RequestWrapper(localName = "register", targetNamespace = "urn:oasis:names:tc:wsrp:v2:types", className = "org.oasis.wsrp.v2.Register")
    @ResponseWrapper(localName = "registerResponse", targetNamespace = "urn:oasis:names:tc:wsrp:v2:types", className = "org.oasis.wsrp.v2.RegistrationContext")
    public void register(
        @WebParam(name = "registrationData", targetNamespace = "urn:oasis:names:tc:wsrp:v2:types")
        RegistrationData registrationData,
        @WebParam(name = "lifetime", targetNamespace = "urn:oasis:names:tc:wsrp:v2:types")
        Lifetime lifetime,
        @WebParam(name = "userContext", targetNamespace = "urn:oasis:names:tc:wsrp:v2:types")
        UserContext userContext,
        @WebParam(name = "registrationState", targetNamespace = "urn:oasis:names:tc:wsrp:v2:types", mode = WebParam.Mode.OUT)
        Holder<byte[]> registrationState,
        @WebParam(name = "scheduledDestruction", targetNamespace = "urn:oasis:names:tc:wsrp:v2:types", mode = WebParam.Mode.OUT)
        Holder<Lifetime> scheduledDestruction,
        @WebParam(name = "extensions", targetNamespace = "urn:oasis:names:tc:wsrp:v2:types", mode = WebParam.Mode.OUT)
        Holder<List<Extension>> extensions,
        @WebParam(name = "registrationHandle", targetNamespace = "urn:oasis:names:tc:wsrp:v2:types", mode = WebParam.Mode.OUT)
        Holder<String> registrationHandle)
        throws MissingParameters, OperationFailed, OperationNotSupported
    ;

    /**
     * 
     * @param registrationContext
     * @param userContext
     * @return
     *     returns java.util.List<org.oasis.wsrp.v2.Extension>
     * @throws OperationFailed
     * @throws OperationNotSupported
     * @throws InvalidRegistration
     * @throws ResourceSuspended
     */
    @WebMethod(action = "urn:oasis:names:tc:wsrp:v2:deregister")
    @WebResult(name = "extensions", targetNamespace = "urn:oasis:names:tc:wsrp:v2:types")
    @RequestWrapper(localName = "deregister", targetNamespace = "urn:oasis:names:tc:wsrp:v2:types", className = "org.oasis.wsrp.v2.Deregister")
    @ResponseWrapper(localName = "deregisterResponse", targetNamespace = "urn:oasis:names:tc:wsrp:v2:types", className = "org.oasis.wsrp.v2.ReturnAny")
    public List<Extension> deregister(
        @WebParam(name = "registrationContext", targetNamespace = "urn:oasis:names:tc:wsrp:v2:types")
        RegistrationContext registrationContext,
        @WebParam(name = "userContext", targetNamespace = "urn:oasis:names:tc:wsrp:v2:types")
        UserContext userContext)
        throws InvalidRegistration, OperationFailed, OperationNotSupported, ResourceSuspended
    ;

    /**
     * 
     * @param registrationContext
     * @param registrationData
     * @param scheduledDestruction
     * @param userContext
     * @param extensions
     * @param registrationState
     * @throws OperationFailed
     * @throws MissingParameters
     * @throws OperationNotSupported
     * @throws ResourceSuspended
     * @throws InvalidRegistration
     */
    @WebMethod(action = "urn:oasis:names:tc:wsrp:v2:modifyRegistration")
    @RequestWrapper(localName = "modifyRegistration", targetNamespace = "urn:oasis:names:tc:wsrp:v2:types", className = "org.oasis.wsrp.v2.ModifyRegistration")
    @ResponseWrapper(localName = "modifyRegistrationResponse", targetNamespace = "urn:oasis:names:tc:wsrp:v2:types", className = "org.oasis.wsrp.v2.RegistrationState")
    public void modifyRegistration(
        @WebParam(name = "registrationContext", targetNamespace = "urn:oasis:names:tc:wsrp:v2:types")
        RegistrationContext registrationContext,
        @WebParam(name = "registrationData", targetNamespace = "urn:oasis:names:tc:wsrp:v2:types")
        RegistrationData registrationData,
        @WebParam(name = "userContext", targetNamespace = "urn:oasis:names:tc:wsrp:v2:types")
        UserContext userContext,
        @WebParam(name = "registrationState", targetNamespace = "urn:oasis:names:tc:wsrp:v2:types", mode = WebParam.Mode.OUT)
        Holder<byte[]> registrationState,
        @WebParam(name = "scheduledDestruction", targetNamespace = "urn:oasis:names:tc:wsrp:v2:types", mode = WebParam.Mode.OUT)
        Holder<Lifetime> scheduledDestruction,
        @WebParam(name = "extensions", targetNamespace = "urn:oasis:names:tc:wsrp:v2:types", mode = WebParam.Mode.OUT)
        Holder<List<Extension>> extensions)
        throws InvalidRegistration, MissingParameters, OperationFailed, OperationNotSupported, ResourceSuspended
    ;

    /**
     * 
     * @param getRegistrationLifetime
     * @return
     *     returns org.oasis.wsrp.v2.Lifetime
     * @throws OperationFailed
     * @throws ModifyRegistrationRequired
     * @throws OperationNotSupported
     * @throws AccessDenied
     * @throws InvalidHandle
     * @throws ResourceSuspended
     * @throws InvalidRegistration
     */
    @WebMethod(action = "urn:oasis:names:tc:wsrp:v2:getRegistrationLifetime")
    @WebResult(name = "getRegistrationLifetimeResponse", targetNamespace = "urn:oasis:names:tc:wsrp:v2:types", partName = "getRegistrationLifetimeResponse")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public Lifetime getRegistrationLifetime(
        @WebParam(name = "getRegistrationLifetime", targetNamespace = "urn:oasis:names:tc:wsrp:v2:types", partName = "getRegistrationLifetime")
        GetRegistrationLifetime getRegistrationLifetime)
        throws AccessDenied, InvalidHandle, InvalidRegistration, ModifyRegistrationRequired, OperationFailed, OperationNotSupported, ResourceSuspended
    ;

    /**
     * 
     * @param setRegistrationLifetime
     * @return
     *     returns org.oasis.wsrp.v2.Lifetime
     * @throws OperationFailed
     * @throws ModifyRegistrationRequired
     * @throws OperationNotSupported
     * @throws InvalidHandle
     * @throws AccessDenied
     * @throws InvalidRegistration
     * @throws ResourceSuspended
     */
    @WebMethod(action = "urn:oasis:names:tc:wsrp:v2:setRegistrationLifetime")
    @WebResult(name = "setRegistrationLifetimeResponse", targetNamespace = "urn:oasis:names:tc:wsrp:v2:types", partName = "setRegistrationLifetimeResponse")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public Lifetime setRegistrationLifetime(
        @WebParam(name = "setRegistrationLifetime", targetNamespace = "urn:oasis:names:tc:wsrp:v2:types", partName = "setRegistrationLifetime")
        SetRegistrationLifetime setRegistrationLifetime)
        throws AccessDenied, InvalidHandle, InvalidRegistration, ModifyRegistrationRequired, OperationFailed, OperationNotSupported, ResourceSuspended
    ;

}
